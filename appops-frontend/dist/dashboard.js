/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/dashboard.js":
/*!**************************!*\
  !*** ./src/dashboard.js ***!
  \**************************/
/***/ (() => {

eval("{document.addEventListener('DOMContentLoaded', () => {\n  // Get userId from URL query params\n  let currentUserId = new URLSearchParams(window.location.search).get('userId');\n  if (!currentUserId) {\n    alert('User ID is required in the URL (e.g., ?userId=74)');\n    window.location.href = 'index.html';\n    return;\n  }\n\n  // Get user email from sessionStorage and compute initials\n  const userEmail = sessionStorage.getItem('userEmail') || '';\n  let initials = '';\n  if (userEmail) {\n    const parts = userEmail.split('@')[0].split(/[._]/); // split on . or _\n    if (parts.length === 1) {\n      initials = parts[0].substring(0, 2).toUpperCase();\n    } else {\n      initials = parts.map(p => p[0]).join('').substring(0, 2).toUpperCase();\n    }\n  } else {\n    initials = currentUserId.substring(0, 2).toUpperCase();\n  }\n\n  // UI setup\n  const userNameDisplay = document.getElementById('user-name-display');\n  const userInitialsDiv = document.getElementById('user-initials');\n  if (userNameDisplay) userNameDisplay.textContent = userEmail || currentUserId;\n  if (userInitialsDiv) userInitialsDiv.textContent = initials;\n\n  // Modal logic\n  window.openModal = (modalId) => { document.getElementById(modalId).classList.add('show'); };\n  window.closeModal = (modalId, event) => {\n    if (event && event.target !== document.getElementById(modalId) && !event.target.classList.contains('btn-neutral')) return;\n    document.getElementById(modalId).classList.remove('show');\n  };\n  document.addEventListener('keydown', (event) => {\n    if (event.key === 'Escape') {\n      document.querySelectorAll('.modal.show').forEach(modal => modal.classList.remove('show'));\n    }\n  });\n\n  // Notification\n  const showNotification = (message, type = 'success') => {\n    const notification = document.createElement('div');\n    notification.className = 'notification';\n    notification.textContent = message;\n    if (type === 'error') notification.classList.add('error');\n    document.body.appendChild(notification);\n    setTimeout(() => { notification.classList.add('show'); }, 10);\n    setTimeout(() => {\n      notification.classList.remove('show');\n      setTimeout(() => { document.body.removeChild(notification); }, 500);\n    }, 3000);\n  };\n\n  // Fetch organizations from backend\n  async function fetchOrganizations(userId) {\n    try {\n      const response = await fetch('/DeploymentManager/getAllTenantsOfUser?userId=' + encodeURIComponent(userId));\n      if (!response.ok) throw new Error('Failed to fetch organizations');\n      return await response.json();\n    } catch (e) {\n      showNotification('Failed to fetch organizations', 'error');\n      return [];\n    }\n  }\n\n  // Render organizations\n  async function renderOrganizations() {\n    const orgList = document.getElementById('orgList');\n    const organizations = await fetchOrganizations(currentUserId);\n    orgList.innerHTML = organizations.length > 0\n      ? organizations.map(org => `<div class=\"org-item\" onclick=\"selectItem('Organization', '${org.name}')\"><h4>${org.name}</h4></div>`).join('')\n      : `<p>No organizations found. Create one to get started.</p>`;\n    populateTenantDropdown(organizations);\n  }\n\n  // Create organization\n  window.createOrganization = async () => {\n    const name = document.getElementById('orgName').value.trim();\n    if (!name) { showNotification('Organization name is required.', 'error'); return; }\n    // Generate a unique incremental id for each new organization\n    let lastOrgId = Number(localStorage.getItem('lastOrgId') || '0');\n    const newOrgId = lastOrgId + 1;\n    localStorage.setItem('lastOrgId', newOrgId);\n    // Build request body for backend: full Tenant object inside 0.value\n    const parentId = Math.floor(Math.random() * 99) + 1; // 1 to 99\n    const body = {\n      0: { value: name },\n      1: { value: parentId },\n      2: { value: Number(currentUserId) },\n      3: { value: \"true\" }\n    };\n    try {\n      const response = await fetch('/DeploymentManager/createTenantSimple', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n      });\n      if (!response.ok) throw new Error('Failed to create organization');\n      showNotification(`Organization \\\"${name}\\\" created successfully!`);\n      document.getElementById('orgName').value = '';\n      closeModal('org-modal', { target: document.getElementById('org-modal') });\n      renderOrganizations();\n    } catch (e) {\n      showNotification('Failed to create organization', 'error');\n    }\n  };\n\n  // Populate tenant dropdown in service modal\n  function populateTenantDropdown(organizations = []) {\n    const select = document.getElementById('tenantSelection');\n    if (!select) return;\n    let options = '<option value=\"\">No organizations available</option>';\n    if (organizations.length > 0) {\n      options = '<option value=\"__personal__\">Use my personal tenant</option>';\n      options += organizations.map(org => `<option value=\"${org.tenantId}\">${org.name}</option>`).join('');\n    } else {\n      options = '<option value=\"__personal__\">Use my personal tenant</option>';\n    }\n    select.innerHTML = options;\n  }\n\n  // Fetch services from backend\n  async function fetchServices(userId) {\n    try {\n      const response = await fetch('/BuilderService/getAllIndesignServicesOfUser?0=' + encodeURIComponent(userId));\n      if (!response.ok) throw new Error('Failed to fetch services');\n      return await response.json();\n    } catch (e) {\n      showNotification('Failed to fetch services', 'error');\n      return [];\n    }\n  }\n\n  // Render services\n  async function renderServices() {\n    const serviceList = document.getElementById('serviceList');\n    const services = await fetchServices(currentUserId);\n    serviceList.innerHTML = services.length > 0\n      ? services.map(srv => `<div class=\"service-item\" onclick=\"selectItem('Service', '${srv.serviceName}')\"><h4>${srv.serviceName}</h4><p style=\"margin:0;color:var(--text-secondary);font-size:0.9rem;\">Version: v1.0.0</p></div>`).join('')\n      : `<p>No services found. Create one to get started.</p>`;\n  }\n\n  // Create service (implement as needed)\n  window.createService = async () => {\n    const serviceName = document.getElementById('serviceName').value.trim();\n    const tenantSelect = document.getElementById('tenantSelection');\n    const tenantId = tenantSelect ? tenantSelect.value : '';\n    if (!serviceName) {\n      showNotification('Service name is required.', 'error');\n      return;\n    }\n    let userIdToSend = tenantId;\n    if (!tenantId || tenantId === '__personal__') {\n      userIdToSend = currentUserId;\n    }\n    const body = {\n      0: { value: serviceName },\n      1: { value: userIdToSend }\n    };\n    try {\n      const response = await fetch('/BuilderService/createIndesignService', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body)\n      });\n      if (!response.ok) throw new Error('Failed to create service');\n      showNotification(`Service \\\"${serviceName}\\\" created successfully!`);\n      document.getElementById('serviceName').value = '';\n      closeModal('service-modal', { target: document.getElementById('service-modal') });\n      renderServices();\n    } catch (e) {\n      showNotification('Failed to create service', 'error');\n    }\n  };\n\n  // Select item\n  window.selectItem = (type, name) => { showNotification(`Selected ${type}: ${name}`); };\n\n  // Initial render\n  renderOrganizations();\n  renderServices();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/dashboard.js\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/dashboard.js"]();
/******/ 	
/******/ })()
;