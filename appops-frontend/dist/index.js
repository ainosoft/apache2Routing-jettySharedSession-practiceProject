/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("{// All the functions you cut from login.html go here.\n// Make sure to attach them to the window object so the inline onclick handlers can find them.\n\n// Update: Accept userId and redirect with ?userId=...\nwindow.handleSuccessfulRedirect = function (email, name, userId) {\n    console.log(`Authentication successful for ${name} (${email}, id: ${userId}). Redirecting...`);\n    sessionStorage.setItem('userEmail', email);\n    sessionStorage.setItem('userName', name);\n    // Redirect to dashboard with userId in URL\n    window.location.href = 'appops_dashboard.html?userId=' + encodeURIComponent(userId);\n}\n\nasync function fetchUserInfo(accessToken) {\n    const response = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {\n        headers: { Authorization: `Bearer ${accessToken}` }\n    });\n    if (!response.ok) throw new Error('Failed to fetch user info from Google.');\n    return response.json();\n}\n\nfunction handleGoogleSignIn() {\n    if (typeof google === 'undefined') {\n        alert('Google Identity Services not loaded. Please wait and try again.');\n        return;\n    }\n\n    const client = google.accounts.oauth2.initTokenClient({\n        client_id: '490602105831-b5ptlvb0rm26h3fr70hrmobrui7n1rjk.apps.googleusercontent.com',\n        scope: 'https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile',\n        prompt: '',\n        callback: async (tokenResponse) => {\n            const { access_token } = tokenResponse;\n            if (!access_token) return;\n\n            try {\n                const userInfo = await fetchUserInfo(access_token);\n                const { email, name } = userInfo;\n\n                const authSlim = {\n                    principle: email,\n                    accountType: 'OAUTH',\n                    oAuthProvider: 'GoogleOAuthWeb',\n                    validator: access_token,\n                    oAuthToken: access_token,\n                };\n\n                const data = { 0: { value: authSlim } };\n               \n                const url = '/UserService/signInUser';\n\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'X-Ao-Tenant-Id': '1'\n                    },\n                    body: JSON.stringify(data),\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Backend request failed with status: ${response.status}`);\n                }\n\n                const responseText = await response.text();\n                // TODO: Get userId from backend response (replace 74 with actual userId)\n                if (responseText.trim() === 'true') {\n                    // You must get the userId from your backend response here!\n                    // For now, using 74 as an example:\n                    handleSuccessfulRedirect(email, name, 74);\n                } else {\n                    throw new Error('Backend authentication failed.');\n                }\n            } catch (error) {\n                console.error('Sign-in process failed:', error);\n                alert(`An error occurred during sign-in: ${error.message}`);\n            }\n        },\n    });\n    client.requestAccessToken();\n}\n\nwindow.toggleForms = function () {\n    const signinForm = document.getElementById('signin-form');\n    const signupForm = document.getElementById('signup-form');\n    signinForm.style.display = (signinForm.style.display === 'none') ? 'block' : 'none';\n    signupForm.style.display = (signupForm.style.display === 'none') ? 'block' : 'none';\n}\n\nwindow.handleSignIn = function () { alert('Manual sign-in is not implemented.'); }\nwindow.handleSignUp = function () { alert('Manual sign-up is not implemented.'); }\n\n// Add event listeners after the DOM is fully loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Sign-in form submission\n    const signinFormElement = document.getElementById('signin-form-element');\n    if (signinFormElement) {\n        signinFormElement.addEventListener('submit', (event) => {\n            event.preventDefault();\n            window.handleSignIn();\n        });\n    }\n\n    // Google Sign-In button\n    const googleSignInBtn = document.getElementById('google-signin-btn');\n    if (googleSignInBtn) {\n        googleSignInBtn.addEventListener('click', handleGoogleSignIn);\n    }\n\n    // \"Sign up\" link to toggle forms\n    const signupLink = document.getElementById('signup-link');\n    if (signupLink) {\n        signupLink.addEventListener('click', window.toggleForms);\n    }\n\n    // Sign-up form submission\n    const signupFormElement = document.getElementById('signup-form-element');\n    if (signupFormElement) {\n        signupFormElement.addEventListener('submit', (event) => {\n            event.preventDefault();\n            window.handleSignUp();\n        });\n    }\n\n    // \"Sign in\" link to toggle forms\n    const signinLink = document.getElementById('signin-link');\n    if (signinLink) {\n        signinLink.addEventListener('click', window.toggleForms);\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;